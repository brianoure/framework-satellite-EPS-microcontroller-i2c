"""
OBC master, EPS slave
I2C protocol : SDA0(), SCL(generated by OBC), SDA1
"""

"""Initalising variables"""
position48          = 0
position56          = 0
WORD_FROM_OBC_48BIT = 0
WORD_TO_OBC_56BIT   = 0

"""STM32 INPUT FROM OBC, the instructions we're receiving from the OBC and the specified frame constants"""
COMMAND_STARTING_IN_16BIT = 34539 #constant
COMMAND_PAYLOAD_ON_8BIT   = 197   #constant
COMMAND_PAYLOAD_OFF_8BIT  = 245   #constant
COMMAND_UHF_ON_8BIT       = 117   #constant
COMMAND_UHF_OFF_8BIT      = 199   #constant
COMMAND_XBAND_ON_8BIT     = 149   #constant
COMMAND_XBAND_OFF_8BIT    = 87    #constant
COMMAND_ENDING_IN_8BIT    = 135   #constant

"""STM32 OUTPUT TO OBC, the telemetry we're sending to the OBC and the specified frame constants"""
TELEMETRY_STARTING_OUT_16BIT  = 34539 #constant
TELEMETRY_ENDING_OUT_8BIT     = 135   #constant   

#TELEMETRY CAPTURE
def telemetry_payload_STATE():
    #read from pin powering the payload mosfet
def telemetry_uhf_STATE():
    #read from pin powering the uhf mosfet
def telemetry_xband_STATE():
    #read from pin powering the xband mosfet
def telemetry_panel_ONE():
    #return specified panel/array of panels voltage
def telemetry_panel_TWO():
    #return specified panel/array of panels voltage
def telemetry_panel_THREE():
    #return specified panel/array of panels voltage
def telemetry_panel_FOUR():
    #return specified panel/array of panels voltage
def telemetry_battery_VOLTAGE():
    #read from the battery balancing circuit
def telemetry_battery_TEMPERATURE():
    #read from battery board thermometer circuit

#COMMUNICATION PINS/LINES
def read_PIN_SCL_FROM_OBC():
    return 0
def read_PIN_SDA0_FROM_OBC():
    return 0
def set_PIN_SDA1_TO_OBC(value):
    if (value):#write a high to this pin/line
    if (not value):#write a low to this pin/line

#COMMAND EXECUTION
def command_payload_ON():
    PAYLOAD_OUT_2BIT=1
    #activate payload supply mosfet
def command_payload_OFF():
    PAYLOAD_OUT_2BIT=3
    #deactivate payload supply mosfet
def command_uhf_ON():
    UHF_OUT_2BIT=1
    #activate uhf supply  mosfet
def command_uhf_OFF():
    UHF_OUT_2BIT=3
    #deactivate uhf supply mosfet
def command_xband_ON():
    XBAND_OUT_2BIT=1
    #activate xband supply mosfet
def command_xband_OFF():
    XBAND_OUT_2BIT=3
    #deactivate xband supply mosfet
    
#DEPLOY PANELS IF RELEASE SWITCHES INDICATE SATELLITE HAS BEEN EJECTED FROM POD
def RELEASE_ONE():
    #release switch 1, return True  means it's activated
def RELEASE_TWO():
    #release switch 2, return True  means it's activated
def RELEASE_THREE():
    #release switch 3, return True  means it's activated
def RELEASE_FOUR():
    #release switch 4, return True  means it's activated
def deploy_PANELS():
    #activate motors to deploy panels
    
while(True):##MAIN WHILE
    #reset the counters appropriately
    if (position48  == 48) : position48 = 0 #0 to 47, bit position counter reset
    if (position56  == 56) : position56 = 0 #0 to 55, bit position counter reset
    #
    #runs once all four release switches have been activated
    if( RELEASE_ONE() and RELEASE_TWO() and RELEASE_THREE() and RELEASE_FOUR() ): deploy_PANELS()
    #
    ##OBC TO EPS##
    if (read_PIN_SCL_FROM_OBC()) :# if SCL is high then data is coming in from OBC
        if(    read_PIN1_SDA_FROM_OBC() ) : WORD_FROM_OBC = (WORD_FROM_OBC | (  1<<(47-position48) )) #store 1 bit at position
        if(not read_PIN1_SDA_FROM_OBC() ) : WORD_FROM_OBC = (WORD_FROM_OBC & (~(1<<(47-position48)))) #store 0 bit at position
        if( ((WORD_FROM_OBC>>32) == STARTING_IN_8BIT) and ((WORD_FROM_OBC&255) == ENDING_IN_8BIT) ):  #start and end validation
            if( ((WORD_FROM_OBC_48BIT>>24)&255 ) == COMMAND_PAYLOAD_ON  ) : command_payload_ON()
            if( ((WORD_FROM_OBC_48BIT>>24)&255 ) == COMMAND_PAYLOAD_OFF ) : command_payload_OFF()
            if( ((WORD_FROM_OBC_48BIT>>16)&255 ) == COMMAND_UHF_ON      ) : command_uhf_ON()
            if( ((WORD_FROM_OBC_48BIT>>16)&255 ) == COMMAND_UHF_OFF     ) : command_uhf_OFF()
            if( ((WORD_FROM_OBC_48BIT>>8 )&255 ) == COMMAND_XBAND_ON    ) : command_xband_ON()
            if( ((WORD_FROM_OBC_48BIT>>8 )&255 ) == COMMAND_XBAND_OFF   ) : command_xband_OFF()
    while(read_PIN_SCL_FROM_OBC()):#PAUSE....wait for the SCL signal to change to low
    #
    ##EPS TO OBC##
    if ( not read_PIN_SCL_FROM_OBC()):#if SCL is low then data is going to OBC
        WORD_TO_OBC =  ( 
                         (TELEMETRY_STARTING_OUT_8BIT<<48) | 
                           (telemetry_payload_STATE()<<46) |
                               (telemetry_uhf_STATE()<<44) |
                             (telemetry_xband_STATE()<<42) |
                               (telemetry_panel_ONE()<<37) |
                               (telemetry_panel_TWO()<<32) |
                             (telemetry_panel_THREE()<<27) |
                              (telemetry_panel_FOUR()<<22) |
                         (telemetry_battery_VOLTAGE()<<17) |
                     (telemetry_battery_TEMPERATURE()<<08) |
                                 TELEMETRY_ENDING_OUT_8BIT
                      )
        set_PIN_SDA_TO_OBC( WORD_TO_OBC & (1<<(55-position)) )
    while(not read_PIN_SCL_FROM_OBC()):#PAUSE....wait for the SCL signal to change to high
    #
    #increment the position counters
    position48 = position48+1
    position56 = position56+1
#MAIN WHILE


